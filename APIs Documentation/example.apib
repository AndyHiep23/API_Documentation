FORMAT: 1A
HOST: https://api.example.com

# HPA3_Backend Api Documentation

Authorization Method is Bearer Token:

```http
Authorization: bearer 5262d64b892e8d4341000001
```

# Data Structures

## NoteData
+ id: 1 (required, number) - Unique identifier
+ contract: Contract_A (required) - Single line description
+ did: Something about DID - Full description of the note which supports Markdown.

## NoteList (array)
+ (NoteData)

# Group HaskPeakAPI

## DID Manager [/dids]
DID Manager API Descriptions

### Create DID [POST]
Create a new did using content in body.

+ Request Body (application/json)

    + Body

            {
                "contract": "Contract_A",
                "did": "This is the did",
                "...": "..."
            }

+ Response 201 (application/json)
    + Body

            {   
                "statusCode": 201,
                "message": "MSG_009",
                "data": {
                    "id": "1",
                    "contract": "Contract_A",
                    "did": "This is the did",
                    "...": "..."
                }
            }

+ Response 400 (application/json)

    + Body

            {   
                "statusCode": 400,
                "message": "MSG_005",
                "data": null
            }

+ Response 401 (application/json)

    + Body

            {   
                "statusCode": 401,
                "message": "MSG_012"
            }

+ Response 403 (application/json)

    + Body

            {   
                "statusCode": 401,
                "message": "MSG_013"
            }

+ Response 500 (application/json)

    + Body

            {   
                "statusCode": 500,
                "message": "MSG_999"
            }


### Get DIDs [GET]
Get a list of DIDs.

+ Response 200 (application/json)

    + Headers

            X-Request-ID: f72fc914
            X-Response-Time: 4ms

    + Body

            {   
                "statusCode": 200,
                "message": "MSG_002",
                "data": [
                        {
                            "id": "1",
                            "contract": "Contract_A",
                            "did": "This is the did",
                            "...": "..."
                        },
                        {
                            "id": "2",
                            "contract": "Contract_B",
                            "did": "This is the did",
                            "...": "..."
                        }
                ],
                "paginations": {
                        "currentPage": 1,
                        "pageSize": 10,
                        "totalPage": 1,
                        "totalCount": 2
                }
            }

    + Schema

            <!-- include(did-schema.json) -->

+ Response 400 (application/json)

    + Body

            {   
                "statusCode": 400,
                "message": "MSG_005",
                "data": null
            }

+ Response 401 (application/json)

    + Body

            {   
                "statusCode": 401,
                "message": "MSG_012"
            }

+ Response 403 (application/json)

    + Body

            {   
                "statusCode": 401,
                "message": "MSG_013"
            }

+ Response 404 (application/json)

    + Body

            {   
                "statusCode": 404,
                "message": "MSG_004"
            }

+ Response 500 (application/json)

    + Body

            {   
                "statusCode": 500,
                "message": "MSG_999"
            }

### Verify DIDs [PUT]
Verify DIDs.

+ Request Body (application/json)

    + Body

            {
                "verified": "boolean"
            }

+ Response 200 (application/json)

    + Headers

            X-Request-ID: f72fc914
            X-Response-Time: 4ms

    + Body

            {   
                "statusCode": 200,
                "message": "MSG_002",
                "data": {
                    "verified": true
                }
            }

+ Response 400 (application/json)

    + Body

            {   
                "statusCode": 400,
                "message": "MSG_005",
                "data": null
            }

+ Response 401 (application/json)

    + Body

            {   
                "statusCode": 401,
                "message": "MSG_012"
            }

+ Response 403 (application/json)

    + Body

            {   
                "statusCode": 401,
                "message": "MSG_013"
            }

+ Response 500 (application/json)

    + Body

            {   
                "statusCode": 500,
                "message": "MSG_999"
            }

## Prescription [/pre_scription]
Prescription API Descriptions

### Rx Submit Data [POST /rxSubmitData]

+ Schema

            <!-- include(pre_scription-schema.json) -->

+ Request Body (application/json)

    + Body

            {
                "input": "hashData"
            }

+ Response 200 (application/json)

    + Headers

            X-Request-ID: f72fc914
            X-Response-Time: 4ms

    + Body

            {   
                "statusCode": 200,
                "message": "MSG_002",
                "data": {
                    "output": true
                }
            }

+ Response 400 (application/json)

    + Body

            {   
                "statusCode": 400,
                "message": "MSG_005",
                "data": null
            }

+ Response 401 (application/json)

    + Body

            {   
                "statusCode": 401,
                "message": "MSG_012"
            }

+ Response 403 (application/json)

    + Body

            {   
                "statusCode": 401,
                "message": "MSG_013"
            }

+ Response 500 (application/json)

    + Body

            {   
                "statusCode": 500,
                "message": "MSG_999"
            }

### Disclose Rx [POST /discloseRx/{idRx} ]

+ Parameters
    + idRx: `68a5sdf67` (required, string) - The Rx ID

+ Response 200 (application/json)

    + Headers

            X-Request-ID: f72fc914
            X-Response-Time: 4ms

    + Body

            {   
                "statusCode": 200,
                "message": "MSG_002",
                "data": {
                    "output": true
                }
            }

+ Response 400 (application/json)

    + Body

            {   
                "statusCode": 400,
                "message": "MSG_005",
                "data": null
            }

+ Response 401 (application/json)

    + Body

            {   
                "statusCode": 401,
                "message": "MSG_012"
            }

+ Response 403 (application/json)

    + Body

            {   
                "statusCode": 401,
                "message": "MSG_013"
            }

+ Response 500 (application/json)

    + Body

            {   
                "statusCode": 500,
                "message": "MSG_999"
            }


### Token Issue (rewardToken) [POST /tokenIssue]
+ Request Body (application/json)

    + Body

            {
                "input": "address"
            }

+ Response 200 (application/json)

    + Headers

            X-Request-ID: f72fc914
            X-Response-Time: 4ms

    + Body

            {   
                "statusCode": 200,
                "message": "MSG_002",
                "data": {
                    "output": true
                }
            }

+ Response 400 (application/json)

    + Body

            {   
                "statusCode": 400,
                "message": "MSG_005",
                "data": null
            }

+ Response 401 (application/json)

    + Body

            {   
                "statusCode": 401,
                "message": "MSG_012"
            }

+ Response 403 (application/json)

    + Body

            {   
                "statusCode": 401,
                "message": "MSG_013"
            }

+ Response 500 (application/json)

    + Body

            {   
                "statusCode": 500,
                "message": "MSG_999"
            }

## Data Integrity [/data_integrity]
Data Integrity API Descriptions

### Hash Value [POST /hashValue]
+ Request Body (application/json)

    + Body

            {
                "input": "data"
            }

+ Response 200 (application/json)

    + Headers

            X-Request-ID: f72fc914
            X-Response-Time: 4ms

    + Body

            {   
                "statusCode": 200,
                "message": "MSG_002",
                "data": {
                    "output": "hashData"
                }
            }

+ Response 400 (application/json)

    + Body

            {   
                "statusCode": 400,
                "message": "MSG_005",
                "data": null
            }

+ Response 401 (application/json)

    + Body

            {   
                "statusCode": 401,
                "message": "MSG_012"
            }

+ Response 403 (application/json)

    + Body

            {   
                "statusCode": 401,
                "message": "MSG_013"
            }

+ Response 500 (application/json)

    + Body

            {   
                "statusCode": 500,
                "message": "MSG_999"
            }

### Check Integrity [POST /checkIntegrity]
+ Request Body (application/json)

    + Body

            {
                "input": "hashData"
            }

+ Response 200 (application/json)

    + Headers

            X-Request-ID: f72fc914
            X-Response-Time: 4ms

    + Body

            {   
                "statusCode": 200,
                "message": "MSG_002",
                "data": {
                    "output": "boolean"
                }
            }

+ Response 400 (application/json)

    + Body

            {   
                "statusCode": 400,
                "message": "MSG_005",
                "data": null
            }

+ Response 401 (application/json)

    + Body

            {   
                "statusCode": 401,
                "message": "MSG_012"
            }

+ Response 403 (application/json)

    + Body

            {   
                "statusCode": 401,
                "message": "MSG_013"
            }

+ Response 500 (application/json)

    + Body

            {   
                "statusCode": 500,
                "message": "MSG_999"
            }

### Medical Notebook Provision [GET /medicalNP]
+ Request Body (application/json)

    + Body

            {
                "input": "address"
            }

+ Response 200 (application/json)

    + Headers

            X-Request-ID: f72fc914
            X-Response-Time: 4ms

    + Body

            {   
                "statusCode": 200,
                "message": "MSG_002",
                "data": [
                        {
                            "id": "1",
                            "identity": "number1",
                            "...": "..."
                        },
                        {
                            "id": "2",
                            "identity": "number2",
                            "...": "..."
                        }
                ],
                "paginations": {
                        "currentPage": 1,
                        "pageSize": 10,
                        "totalPage": 1,
                        "totalCount": 2
                }
            }

+ Response 400 (application/json)

    + Body

            {   
                "statusCode": 400,
                "message": "MSG_005",
                "data": null
            }

+ Response 401 (application/json)

    + Body

            {   
                "statusCode": 401,
                "message": "MSG_012"
            }

+ Response 403 (application/json)

    + Body

            {   
                "statusCode": 401,
                "message": "MSG_013"
            }

+ Response 404 (application/json)

    + Body

            {   
                "statusCode": 404,
                "message": "MSG_004"
            }

+ Response 500 (application/json)

    + Body

            {   
                "statusCode": 500,
                "message": "MSG_999"
            }
